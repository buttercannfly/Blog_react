{
    "success": true,
    "data": [
        "\u5e93\u5934\u6587\u4ef6\u4e0e\u5de5\u4f5c\u533a\u5934\u6587\u4ef6\u7684\u533a\u522b  \n```cpp\n#include<iostream>\n#include<stdio.h>\n#include\"BCB.h\"\n#include\"BMgr.h\"\n```\n\u4f7f\u7528unordered_map\u800c\u4e0d\u662f\u81ea\u5df1\u7ef4\u62a4hash\u6570\u7ec4  \n\u4f7f\u7528vector\u5b58\u653e\u7f13\u51b2\u533abuf\uff0c\u800c\u4e0d\u662f\u7528\u6570\u7ec4(\u6570\u7ec4\u7528\u6808\uff0cvector\u4f7f\u7528\u5806)  \ncout\u51fd\u6570cout<<\"i:\"+i<<endl\u51fa\u9519",
        "## \u7b97\u6cd5Las Vegas\u4f5c\u4e1a  \n***\n- \u5f20\u4f1f\u5eb7 SA19011178\n### **1.\u5f53\u653e\u7f6e(n+1)th\u7687\u540e\u65f6\uff0c\u82e5\u6709\u591a\u4e2a\u4f4d\u7f6e\u662f\u5f00\u653e\u7684\uff0c\u5219\u7b97\u6cd5QueensLV\u9009\u4e2d\u4efb\u4e00\u4f4d\u7f6e\u7684\u6982\u7387\u76f8\u540c**  \n\u8bc1\u660e\uff1a\u5047\u8bbe\u653e\u7f6e\u7b2ck\u4e2a\u7687\u540e\u65f6\uff0c\u6709nb\u4e2a\u4f4d\u7f6e\u662f\u5f00\u653e\u7684\uff0c\u5206\u522b\u4e3aa,b,...,i,...,nb  \n\u90a3\u4e48\u7b2ca\u4e2a\u4f4d\u7f6e\u88ab\u9009\u5230\u7684\u6982\u7387\u4e3a  \n$1*\\frac 12*\\frac 23*...*\\frac {nb-1}{nb}=\\frac 1{nb}$\n\u5176\u4ed6\u540c\u7406\uff0c\u5219\u5728\u653e\u7f6e\u7b2cn\u4e2a\u7687\u540e\u65f6\uff0c\u5728\u4efb\u610f\u4f4d\u7f6e\u7684\u6982\u7387\u76f8\u540c\u3002\n### **2.\u5199\u4e00\u7b97\u6cd5\uff0c\u6c42n=12~20\u65f6\u6700\u4f18\u7684StepVegas\u503c**  \n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <time.h>\n\n#define N  12\n#define RUN_TIME    100\n\n// enum boolean{false,true};\n\nint x[N+1]={0};\nint y[N+1]={0};\n\nint randomi(int m,int n)\n{\n  int j;\n  if(m > n)\n  {\n    printf(\"n must large than m!!!\\n\");\n    return -1;\n  }\n  if(m==n)\n    return n;\n//  srand((unsigned)time(NULL));\n  while(1)\n  {\n    j = rand();\n    j %= n;\n    if(j < m)\n        j += n-m;\n    else\n        return j;\n  }\n}\n\nint place(int k)\n{\n int j;\n for(j=1;j<k;j++)\n {\n   if((abs(k-j)==abs(x[j]-x[k])) || (x[j]==x[k]))\n      return false;\n }\n return true;\n}\n\nvoid backtrack(int t)\n{\n int i;\n if(t>N)\n {\n   for(i=1;i<=N;i++)\n     y[i]=x[i];\n   return;\n }\n else\n   for(i=1;i<=N;i++)\n   {\n    x[t]=i;\n    if(place(t))\n    {\n      backtrack(t+1);\n    }\n   }\n}\n\nint QueensLV(int stopLV)\n{\n int i,j,count=1,k=1;\n while((k <= stopLV) &&(count>0))\n {\n   count=0;\n   j=0;\n   for(i=1;i<=N;i++)\n   {\n    x[k]=i;\n    if(place(k))\n    {\n     count++;\n     if(randomi(0,count)==0)\n       j=i;\n    }  \n   }\n   if(count>0)\n     x[k++]=j;\n\n//   for(i=1;i<k;i++)\n//      printf(\"x[%d]=%d \",i,x[i]);\n//   printf(\"\\n(k) = %d\\n\",k);\n }\n if(count>0)\n   return true;\n else\n   return false;\n}\n\nint main(void)\n{int dif_n,time_now,time_end;\n for(dif_n=0;dif_n<N;dif_n++)\n\n {int i,stop,j=0,sucess=0;\n  stop=dif_n;\n  time_now=clock();\n  srand((unsigned)time(NULL));\n  do{\n         if(stop<N)\n      {    \n          while(!QueensLV(stop))\n           ;\n         }\n    else\n        QueensLV(stop);\n      backtrack(stop+1);\n    if(y[N]!=0)\n    {\n        sucess++;\n        // printf(\"sucess = %d\\n\",sucess);\n        for(i=0;i<=N;i++)\n            y[i]=0;\n    }\n    j++;\n    // printf(\"j=%d\\n\",j);\n  }while( j<RUN_TIME);\n    time_end=clock();\n    printf(\"time:%ld for stepvegas:%d\\n\",(time_end-time_now)*1000,stop);\n    }\n\n  return 0;\n}\n```\n\u5bf9\u4e8en=12\u65f6\uff1a\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a \n```cpp \ntime:30848000 for stepvegas:0\ntime:2386000 for stepvegas:1\ntime:254000 for stepvegas:2\ntime:39000 for stepvegas:3\ntime:8000 for stepvegas:4\ntime:2000 for stepvegas:5\ntime:1000 for stepvegas:6\ntime:1000 for stepvegas:7\ntime:0 for stepvegas:8\ntime:1000 for stepvegas:9\ntime:1000 for stepvegas:10\ntime:2000 for stepvegas:11\n```\n\u6700\u4f73stepVegas\u4e3a8  \nn=13\u65f6\uff0cStepVegas=6  \nn=14\u65f6\uff0cStepVegas=7  \nn=15\u65f6\uff0cStepVegas=8\n                                                                                                                                                                                                                                                                                         ",
        "# \u5b58\u50a8\u548c\u7f13\u51b2\u7ba1\u7406  \n## \u5b9e\u9a8c\u76ee\u7684  \n\u5b9e\u73b0\u4e00\u4e2a\u7b80\u6613\u7684\u5b58\u50a8\u548c\u7f13\u51b2\u7ba1\u7406\u5668   \n***\n### \u7f13\u51b2\u533a\u548c\u9875\u9762  \n\u7f13\u51b2\u533aBuffer\u4ee3\u8868\u4e86\u5728\u4e3b\u5b58\u4e2d\u7684\u7a7a\u95f4  \n\u7f13\u51b2\u533a\u7531frame\u7ec4\u6210  \nframe\u7531\u4e0b\u9762\u7684\u6570\u636e\u7ed3\u6784\u8868\u793a\n```cpp\n#define FRAMESIZE 4096\n    struct bFrame{\n        Char field[FRAMESIZE];\n    };\n```  \n\u7f13\u51b2\u533abuffer\u6570\u7ec4(array)\u4f1a\u5b58\u50a8\u4e00\u7cfb\u5217frame(\u5b58\u50a8\u5df2\u88c5\u8f7d\u7684page)\uff0c\u8fd9\u4e2aarray\u5982\u4e0b\u6240\u793a\uff1a  \n```cpp\n    #define DEFBUFSIZE 1024\n    bFrame buf[DEFBUFSIZE]\n```  \n***  \n### \u9875\u9762Page\u683c\u5f0f  \n\u5728\u8fd9\u4e2a\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u63d0\u53capage\u7684\u5177\u4f53\u7ed3\u6784\u3002\u53ea\u5173\u5fc3\u9875\u9762id\u548c\u9875\u9762\u5927\u5c0f\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8bbe\u8ba1\u9875\u9762\u683c\u5f0f\u3002  \n### \u6587\u4ef6File\u683c\u5f0f  \n\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u57fa\u4e8e\u76ee\u5f55\u7684\u7ed3\u6784\u533a\u7ec4\u7ec7\u6570\u636e\u5e93\u6587\u4ef6\u3002\u6bcf\u4e2a\u6587\u4ef6\u90fd\u6709\u4e00\u4e2a\u8d77\u59cb\u9875(\u5b83\u5305\u542b\u4e86\u6307\u5411\u6587\u4ef6\u6240\u6709\u9875\u7684\u6307\u9488)\uff0c\u4f7f\u7528\u57fa\u4e8e\u76ee\u5f55\u7684\u597d\u5904\u5728\u4e8e\u5f53\u6307\u5b9a\u67d0\u4e00\u4e2a\u7279\u5b9a\u9875\u9762\u65f6\uff0c\u8fd9\u6837\u66f4\u52a0\u5feb\u6377\u3002  \n### \u7f13\u51b2\u6280\u672f(Buffer Technique)  \n\u6211\u4eec\u9009\u62e9LRU\u4f5c\u552f\u4e00\u7684\u7f6e\u6362\u7b97\u6cd5\uff0c\u597d\u5904\u81ea\u7136\u4e0d\u5fc5\u591a\u8bf4  \n### \u54c8\u5e0c\u6280\u672f(Hashing Technique)  \n\u5bf9\u4e8e\u7f13\u51b2\u4e2d\u7684\u6bcf\u4e2aframe\uff0c\u90fd\u5fc5\u987b\u8981\u6709\u4e00\u4e2aBCB\u88ab\u4fdd\u5b58(buffer control block)\u3002\u5b83\u5305\u542b\u4e86\u4e00\u4e2apage_id,frame_id,fix_count,dirty_bit.  \n\u4e24\u4e2a\u54c8\u5e0c\u8868\u9700\u8981\u88ab\u4fdd\u5b58\uff0c\u7b2c\u4e00\u4e2a\u662fpage_id\u5bf9\u5e94frame_id\u548cBCB,\u7b2c\u4e8c\u4e2a\u662fframe_id\u5bf9\u5e94page_id.  \n\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u7b80\u5355\u7684\u9759\u6001\u54c8\u5e0c\u6280\u672f\u3002  \n\u54c8\u5e0c\u51fd\u6570\u4f1a\u50cf\u662f  \nH(K)=(page_id)%buffer_size  \n\u5bf9\u4e8epage_id\u5230BCB\u7684\u54c8\u5e0c\u8868\u4f1a\u50cf\u662f\uff1aBCB hTable[BufferSize]  \n\u5bf9\u4e8eframe_id\u5230page_id\u7684\u54c8\u5e0c\u8868\u4f1a\u50cf\u662f\uff1aint hTable[BufferSize]  \n```cpp\nstruct BCB{\n    BCB();\n    int page_id;\n    int frame_id;\n    int count;\n    int dirty;\n    BCB *next;\n};\n```  \n***\n### \u6587\u4ef6\u5b58\u50a8  \n\u5728\u6b64\u9879\u76ee\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u78c1\u76d8\u4e0a\u7684\u4e00\u4e2a\u7269\u7406\u6587\u4ef6\uff0c\u6240\u6709\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u90fd\u4f1a\u5b58\u5728\u8fd9\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u547d\u540d\u4e3adata.dbf.  \n### \u7c7b\u8bbe\u8ba1  \n#### <font color=\"green\">\u6570\u636e\u5b58\u50a8\u7ba1\u7406\u7c7b</font>  \n```cpp\nclass DSMgr{\n    public:\n        DSMgr();\n        int OpenFile(String filename);\n        int CloseFile();\n        bFrame ReadPage(int page_id);\n        int WritePage(int frame_id, bFrame frm);\n        int Seek(int offset, int pos);\n        FILE * GetFile();\n        void IncNumPages();\n        int GetNumPages();\n        void SetUse(int index, int use_bit);\n        int GetUse(int index);\n    private:\n        FILE *currFile;\n        int numPages;\n        int Pages[MAXPAGES];\n}\n``` \n#### <font color=\"green\">\u7f13\u51b2\u533a\u7ba1\u7406</font>  \n```cpp\nclass BMgr{\n    public:\n        BMgr();\n        int FixPage(int page_id, int prot);\n        void NewPage FixNewPage();\n        int UnfixPage(int page_id);\n        int NumFreeFrames();\n        int SelectVictim();\n        int Hash(int page_id);\n        void RemoveBCB(BCB * ptr,int page_id);\n        void RemoveLRUEle(int frid);\n        void SetDirty(int frame_id);\n        void UnsetDirty(int frame_id);\n        void WriteDirtys();\n        PrintFrame(int frame_id);\n    private:\n        int ftop[DEFBUFSIZE];\n        BCB * ptof[DEFBUFSIZE];\n}\n```  \n***\n## \u5bf9\u7c7b\u4e2d\u51fd\u6570\u7684\u89e3\u91ca(\u9876\u5965)  \n## \u7f13\u51b2\u7c7b\u63a5\u53e3\u51fd\u6570\n* FixPage(int page_id,int prot)  \n   > \u539f\u578bFixPage(Page_id,protection)\uff0c\u8fd4\u56de\u4e00\u4e2aframe_id.\u8fd9\u4e2a\u51fd\u6570\u662f\u4e3a\u4e86\u5224\u65ad\u9875\u9762\u662f\u5426\u5b58\u5728\u4e8e\u7f13\u51b2\u533a\uff0c\u5e76\u8fd4\u56de\u5bf9\u5e94\u7684frame_id\uff1b\u5982\u679c\u8fd9\u4e2a\u9875\u9762\u5e76\u4e0d\u5728\u7f13\u51b2\u533a\u5185\uff0c\u5b83\u4f1a\u9009\u62e9\u4e00\u4e2avictim page(\u727a\u7272\u9875\uff1f)\uff0c\u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u5c06\u5b83\u8f7d\u5165\u3002\n* FixNewPage()  \n  >\u539f\u578bFixNewPage()\uff0c\u8fd4\u56de\u4e00\u4e2apage_id\u548cframe_id\u3002\u8fd9\u4e2a\u51fd\u6570\u5728\u63d2\u5165(\u7d22\u5f15\u5206\u5272\u3001\u5bf9\u8c61\u521b\u5efa)\u65f6\uff0c\u9700\u8981\u4e00\u4e2a\u65b0\u9875\u9762\u3002\u8fd9\u4e2a\u51fd\u6570\u4f1a\u627e\u5230\u4e00\u4e2a\u7a7a\u9875\u9762\u4f9b\u4e0a\u5c42\u4f7f\u7528\u3002\n* UnfixPage(int page_id)\n  > \u539f\u578bUnfixPage(int page_id)\uff0c\u8fd4\u56de\u4e00\u4e2aframe_id.\u8fd9\u4e2a\u51fd\u6570\u662f\u524d\u4e24\u4e2a\u51fd\u6570\u7684\u8865\u8db3\u3002\u8fd9\u4e2a\u51fd\u6570\u4f1a\u6d88\u8017frame\u4e0a\u7684fix count\uff0c\u5982\u679ccount\u51cf\u5c11\u81f30\uff0c\u5982\u679c\u88ab\u9009\u4e2d\u7684\u8bdd\u8fd9\u4e2aframe\u53ef\u4ee5\u88ab\u79fb\u9664\uff0cpage_id \u53d8\u6362\u6210frame_id\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u9009\u6210\u727a\u7272\u9875\uff0c\u5982\u679c\u8be5\u9875\u9762\u4e0a\u7684count\u5df2\u7ecf\u964d\u4f4e\u81f30.\n* NumFreeFrames()\n  >\u8fd9\u4e2a\u51fd\u6570\u67e5\u770b\u7f13\u51b2\u533a\uff0c\u8fd4\u56de\u7f13\u51b2\u533a\u4e2d\u53ef\u4ee5\u88ab\u4f7f\u7528\u7684\u9875\u9762\u7684\u4e2a\u6570\n* SelectVictim()\n    > \u8fd9\u4e2a\u51fd\u6570\u9009\u62e9\u4e00\u4e2aframe\u88ab\u53d6\u4ee3\u3002\u5982\u679c\u88ab\u9009\u62e9frame\u7684dirty\u4f4d\u5df2\u7ecf\u88ab\u7f6e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u9875\u9762\u9700\u8981\u88ab\u5199\u56de\u78c1\u76d8\u3002\n* Hash(int page_id)\n  > \u8fd4\u56deframe_id\n* RemoveBCB(BCB *ptr, int page_id)\n  > \u8fd9\u4e2a\u51fd\u6570\u6839\u636epage_id\u4ece\u6570\u7ec4\u4e2d\u79fb\u9664BCB\u3002\u4ec5\u5f53SelectVictim()\u51fd\u6570\u9700\u8981\u66ff\u6362\u4e00\u4e2aframe\u3002\n* RemoveLRUEle(int frid)\n  > \u4ece\u5217\u8868\u4e2d\u79fb\u9664LRU\u5143\u7d20\uff1f\uff1f\uff1f\n* SetDirty(int frame_id)\n  > \u8bbe\u7f6eframe_id\u7684\u810f\u4f4d\u3002\u810f\u4f4d\u662f\u7528\u6765\u77e5\u9053\u662f\u5426\u8981\u5c06frame\u5199\u51fa\u3002bit=1->will be written,otherwise will not be written\n* UnsetDirty(int frame_id)\n  > \u8bbe\u7f6eframe_id\u7684\u810f\u4f4d\u4e3a0.\u5f53setDirty\u51fd\u6570\u88ab\u8c03\u7528\uff0c\u4f46\u662f\u8be5\u9875\u9762\u5728\u5f53\u524d\u8fd8\u6709\u8054\u7cfb\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8be5\u9875\u9762\u4e0d\u9700\u8981\u88ab\u5199\u56de\uff0c\u56e0\u4e3a\u4ed6\u4e0d\u60f3\u73b0\u5728\u88ab\u4fdd\u5b58\u3002\n* WriteDirtys()\n  > \u8fd9\u4e2a\u51fd\u6570\u53ea\u6709\u5f53\u7cfb\u7edf\u5173\u673a\u65f6\u8c03\u7528\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c06\u4f1a\u628a\u6240\u6709\u810f\u4f4d\u4e3a1\u7684\u9875\u9762\u5199\u56de\u5185\u5b58\n* PrintFrame(int frame_id)\n  > \u6839\u636eframe_id\u6253\u5370frame\u5185\u5bb9\n***\n## \u6570\u636e\u5b58\u50a8\u7c7b\u63a5\u53e3\u51fd\u6570\n* OpenFile(string filename)\n    >\u4efb\u4f55\u65f6\u95f4\uff0c\u5f53\u4e00\u4e2a\u6587\u4ef6\u9700\u8981\u88ab\u8bfb\u6216\u8005\u5199\uff0c\u6839\u636e\u6587\u4ef6\u540d\u6253\u5f00\u6587\u4ef6\n* CloseFile()\n    >\u5f53\u6570\u636e\u6587\u4ef6\u9700\u8981\u88ab\u5173\u95ed\u8c03\u7528\n* ReadPage(int page_id)\n    >\u88ab\u7f13\u51b2\u533a\u7ba1\u7406\u7684FixPage\u8c03\u7528\uff0c\u8fd4\u56de\u4ed6\u5df2\u7ecf\u8bfb\u5230\u7684\u5185\u5bb9\u3002\u8fd9\u4e2a\u51fd\u6570\u8c03\u7528fseek()\u548cfread()\u53bb\u4ece\u4e00\u4e2a\u6587\u4ef6\u4e2d\u83b7\u53d6\u6570\u636e\n* WritePage(int frame_id, bFrame frm)\n    >\u6bcf\u5f53\u4e00\u4e2a\u9875\u9762\u4ece\u7f13\u51b2\u533a\u4e2d\u8c03\u51fa\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u4f1a\u88ab\u8c03\u7528\u3002\u8fd4\u56de\u5df2\u7ecf\u5199\u4e86\u591a\u5c11\u5b57\u8282\uff0c\u8fd9\u4e2a\u51fd\u6570\u91c7\u7528fseek\u548cfwrite\u5f80file\u91cc\u5199\u6587\u4ef6\n* Seek(int offset, int pos)\n    >\u79fb\u52a8\u6587\u4ef6\u6307\u9488\n* GetFile()\n    >\u83b7\u53d6\u5f53\u524d\u6587\u4ef6\n* IncNumPages()\n    > \u589e\u52a0page\u8ba1\u6570\n* GetNumPages()\n    >\u8fd4\u56depage\u8ba1\u6570\n* SetUse(int page_id, int use_bit)\n  > \u6709\u4e2a\u6570\u7ec4\u4fdd\u5b58\u88ab\u4f7f\u7528\u7684\u9875\u9762\uff0c\u8fd9\u4e2a\u51fd\u6570\u8bbe\u7f6e\u6307\u5b9a\u9875\u9762\u7684\u88ab\u4f7f\u7528\u4f4d\n* GetUse(int page_id)\n    >\u8fd4\u56de\u6307\u5b9apage_id\u7684\u4f7f\u7528\u4f4d\n***\n"
    ]
}