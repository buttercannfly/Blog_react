{"version":3,"sources":["List.js","App.js","Codeblock.js","md.js","serviceWorker.js","index.js"],"names":["axios","defaults","withCredentials","headers","post","List_blog","state","totalData","listData","md","fetch","method","then","response","json","data","setState","list","i","length","push","title","content","order","this","handleclick","itemLayout","size","pagination","onChange","page","console","log","pageSize","dataSource","renderItem","item","to","Item","key","Meta","Component","Header","Layout","Content","App","className","theme","mode","defaultSelectedKeys","style","lineHeight","path","padding","margin","href","type","background","minHeight","List","from","CodeBlock","value","props","language","tomorrowNightEighties","React","PureComponent","Form","create","Md","index","match","params","order_id","init","source","escapeHtml","renderers","code","codeblock","Boolean","window","location","hostname","ReactDOM","render","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.508e8fdf.chunk.js","sourcesContent":["import {List,  Icon} from 'antd';\r\nimport React, {Component} from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n// import Md from './md';\r\nimport { Link } from 'react-router-dom';\r\n// import {withRouter} from 'react-router-dom';\r\naxios.defaults.withCredentials = true\r\naxios.defaults.headers.post['Content-Type'] = 'application/json';\r\n\r\n\r\n\r\nconst IconText = ({ type, text }) => (\r\n    <span>\r\n      <Icon type={type} style={{ marginRight: 8 }} />\r\n      {text}\r\n    </span>\r\n  );\r\nclass List_blog extends Component{\r\n  constructor(){\r\n    super()\r\n    this.state={\r\n      totalData:'',\r\n      listData:[],\r\n      md:''\r\n    }\r\n  }\r\n  handleclick(){\r\n    fetch('./title.json', {\r\n      method: \"GET\",\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n        },\r\n     \r\n    })\r\n    .then(response => response.json())//解析为Promise\r\n    .then(data => {\r\n    \r\n    this.setState({totalData: data})  ////赋值到本地数据\r\n    var list = [];\r\n    for(let i=0; i<this.state.totalData['data'].length; i++){//自动获取\r\n      list.push({\r\n        title:this.state.totalData['data'][i],\r\n        content:this.state.totalData['data'][i],\r\n        order:i,\r\n      });\r\n    }\r\n    this.setState({listData:list})\r\n  })\r\n  }\r\ncomponentDidMount(){\r\n  this.handleclick()\r\n}\r\n    render(){\r\n        return(\r\n            <List\r\n            itemLayout=\"vertical\"\r\n            size=\"large\"\r\n            pagination={{\r\n              onChange: page => {\r\n                console.log(page);\r\n              },\r\n              pageSize: 3,\r\n            }}\r\n            dataSource={this.state.listData}\r\n            // footer={\r\n            //   <div>\r\n            //     <b>butter&bentleyoma</b> \r\n            //   </div>\r\n            // }\r\n            renderItem={item => (\r\n              <Link to={'/article/'+item.order}>\r\n              <List.Item \r\n                key={item.title}\r\n              >\r\n                <List.Item.Meta/>\r\n                {item.title}\r\n                {/* {item.content}s */}\r\n              </List.Item>\r\n              {/* <Route path='/article/:order_id' component={Md}/> */}\r\n              </Link>\r\n              \r\n            )}\r\n          /> \r\n        )\r\n    }\r\n    mountNode\r\n}\r\nexport default List_blog ","import React, {Component} from 'react';\nimport './App.css';\n// import { connnect } from 'dva';\n// import codeblock from \"./Codeblock\";\nimport List_blog from './List';\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\nimport {Route,Redirect} from 'react-router-dom';\n// import axios from 'axios';\n// import mock from './Data';\n// console.log(mock.mock.toString)\nconst { Header, Content } = Layout;\n\n// class App extends Component {\n  \n//   render(){\n//     constructor(){\n//       super()\n//       this.state={\n//         totalData:''\n//       }\n//     }\n    \n//     handleclick(){\n//       fetch('./data.json', {\n//         method: \"GET\",\n//         headers: {\n//           'Content-Type': 'application/json',\n//           'Accept': 'application/json'\n//           },\n       \n//       })\n//       .then(response => response.json())//解析为Promise\n//       .then(data => {\n      \n//       this.setState({totalData: data})  ////赋值到本地数据\n//       console.log(this.state.totalData)\n  \n//     })\n//     }\n//   componentDidMount(){\n//     this.handleclick()\n//   }\n//     return (\n//       <Layout className=\"layout\">\n//     <Header>\n//       <div className=\"logo\" />\n//       <Menu\n//         theme=\"dark\"\n//         mode=\"horizontal\"\n//         defaultSelectedKeys={['2']}\n//         style={{ lineHeight: '64px' }}\n//       >\n//         <Menu.Item key=\"1\" onClick={this.getData.bind(this)}>主页</Menu.Item>\n//         <Menu.Item key=\"2\">文章列表</Menu.Item>\n//         <Menu.Item key=\"3\">图库</Menu.Item>\n//       </Menu>\n//     </Header> \n//     <Content style={{ padding: '0 50px' }}>\n//       <Breadcrumb style={{ margin: '16px 0' }}>\n//         <Breadcrumb.Item href=\"https://www.baidu.com\"><Icon type=\"home\"/></Breadcrumb.Item>\n//         <Breadcrumb.Item>博客</Breadcrumb.Item>\n//         {/* <Breadcrumb.Item>App</Breadcrumb.Item> */}\n//       </Breadcrumb>\n//       <div style={{ background: '#fff', padding: 24, minHeight: 580 }}><List_blog/></div>\n//     </Content>\n//     <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n//   </Layout>\n//     )\n//   }\n//   mountNode\n// }\nclass App extends Component{\n//   constructor(){\n//     super()\n//     this.state={\n//       totalData:''\n//     }\n//   }\n   \n  \n//   handleclick(){\n//     fetch('./data.json', {\n//       method: \"GET\",\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Accept': 'application/json'\n//         },\n     \n//     })\n//     .then(response => response.json())//解析为Promise\n//     .then(data => {\n    \n//     this.setState({totalData: data})  ////赋值到本地数据\n//     console.log(this.state.totalData)\n//     console.log(this.state.totalData['data'])\n\n//   })\n//   }\n// componentDidMount(){\n//   this.handleclick()}\nrender(){\n  return (\n    <Layout className=\"layout\">\n    <Header>\n      <div className=\"logo\" />\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['2']}\n        style={{ lineHeight: '64px' }}\n      >\n        {/* <Menu.Item key=\"1\">主页</Menu.Item>\n        <Menu.Item key=\"2\">文章列表</Menu.Item>\n        <Menu.Item key=\"3\">图库</Menu.Item> */}\n      </Menu>\n    </Header>\n    <Route path='/home'>\n    <Content style={{ padding: '0 50px' }}>\n      <Breadcrumb style={{ margin: '16px 0' }}>\n        <Breadcrumb.Item href=\"https://www.baidu.com\"><Icon type=\"home\"/></Breadcrumb.Item>\n        <Breadcrumb.Item>博客</Breadcrumb.Item>\n        {/* <Breadcrumb.Item>App</Breadcrumb.Item> */}\n      </Breadcrumb>\n      <div style={{ background: '#fff', padding: 24, minHeight: 580 }}><List_blog ></List_blog></div>\n    </Content></Route> \n    {/* <Route path=\"/new\">New</Route>   */}\n    {/* <Footer style={{ textAlign: 'center' }}>blog ©2020 Created by Zwk</Footer> */}\n    <Redirect to='/home' from='/'/>\n  </Layout>\n  \n  );\n}\nmountNode\n}\nexport default App;\n","import React from 'react';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { tomorrowNightEighties } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nimport { Form } from 'antd';\r\n\r\nclass CodeBlock extends React.PureComponent {\r\n  render() {\r\n    const { value } = this.props;\r\n\r\n    return (\r\n      <SyntaxHighlighter language=\"\" style={tomorrowNightEighties}>\r\n        {value}\r\n      </SyntaxHighlighter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form.create()(CodeBlock);","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport codeblock from \"./Codeblock\";\r\n// import Newmd from \"./markdown/new.md\";\r\nimport ReactMarkdown from 'react-markdown';\r\n// import { Route } from 'react-router-dom';\r\nclass Md extends Component{\r\n  // state = {\r\n  //   markdown: '',\r\n  // };\r\n  constructor(){\r\n    super()\r\n    this.state={\r\n      totalData:''\r\n    }\r\n  }\r\n  init(){\r\n    var index = this.props.match.params.order_id\r\n    console.log(index)\r\n    fetch('./data.json', {\r\n      method: \"GET\",\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n        },\r\n     \r\n    })\r\n    .then(response => response.json())//解析为Promise\r\n    .then(data => {\r\n    this.setState({totalData: data['data'][index]})  ////赋值到本地数据\r\n    console.log(this.state.totalData)\r\n  }\r\n    )}\r\n  componentWillMount() {\r\n    this.init();\r\n  }\r\n  render(){\r\n    // const { markdown } = this.state.totalData;\r\n\r\n    return(\r\n      // <Route component={Md} path='/good'>\r\n      <ReactMarkdown\r\n        source={this.state.totalData}\r\n        escapeHtml={false}\r\n        renderers={{\r\n        code:codeblock,\r\n    }}\r\n/>\r\n// </Route>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Md;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Md from './md';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router,Route } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <Route component={App} path=\"/\"/>\n        <Route path='/article/:order_id' component={Md}/>\n    </Router>\n    \n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}